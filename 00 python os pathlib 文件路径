

# import os ruamel.yaml



# print ("目录为: %s" %os.listdir(os.getcwd()))                                                 ## 列出目录

# os.getcwd()                                                                                  ## 获取当前所在路径。

# os.mkdir('img')                                                                              ## 创建path指定的目录，这样只能建立一层
# os.makedirs('img/file1/file2')                                                               ## 新建多层文件夹

# os.listdir(os.getcwd())                                                                      ## 返回指定目录下的所有文件名和目录名 ，返回的是一个列表

# print(os.path.abspath('hello.png'))                                                          ## 生成绝对路径的三种方式
# print(os.path.abspath(ruamel.yaml.__file__))
# print(os.path.join(os.path.abspath('.'),'hello.jpg'))                                        ## .表示当前路径，..上级目录
# print(os.path.join('/home/kiosk','hello.jpg'))                                               ## 

# print(os.path.exists('ips.txtyyyy'))                                                         ## 判断文件或目录是否存在
# os.path.walk(path, visit, arg)

# filename = '/1234/year/month/day/hello.jpg'                                                  ## 获取目录或文件名
# print(os.path.basename(filename))
# print(os.path.dirname(filename))

# print(os.path.abspath(__file__))
# print(os.path.basename(__file__))
# print(os.path.dirname(__file__))

# print(os.path.split('/tmp/hello/hello.jpg'))                                                 ## 将目录名和文件名分离
# print(os.path.splitext('hello.jpg'))                                                         ## 分离后缀名和文件名

# print(os.path.isdir('img'))                                                                  ## 判断是否是目录
# print(os.path.isfile('ips.txt'))                                                             ## 判断是否是文件

# os.rename('data.txt','data1.txt')                                                            ## 文件重命名

# os.rmdir('img')                                                                              ## 不能递归删除目录，一层一层删

# os.mknod('00_ok.txt')                                                                        ## 创建文件
# os.remove('00_ok.txt')                                                                       ## 删除文件




# os.system('cmd')

# print(os.environ)
# print(os.environ.get('PATH'))  #通过key值获取环境变量对应的value值

'''----------------------------------------------------------------------'''


import os,pathlib

# print(os.getcwd(),'//', os.path.dirname(__file__),'//',pathlib.Path.cwd())                   ## 获取当前目录
# print(os.path.dirname(os.path.dirname(os.getcwd())),'//',pathlib.Path.cwd().parent.parent)   ## 获取爷爷目录

# print(pathlib.Path())                                                                        ## 当前目录
# print(pathlib.Path('a', 'b', 'c/d'))                                                         ## 当前目录下的a/b/c/d
# print(pathlib.Path('/etc/',"Test","test"))                                                   ## 根下的etc目录

# p = pathlib.Path()
# p = p / 'a'
# print(p.absolute())                                                                          ## G:\pywwroot\DevOps\a
# p1 = 'b' / p
# print(p1.absolute())                                                                         ## G:\pywwroot\DevOps\b\a
# p2 = pathlib.Path('c')
# p3 = p2 / p1
# print(p3.parts)                                                                              ## ('c', 'b', 'a')
# p3.joinpath('etc', 'init.d', pathlib.Path('httpd'))

# print(pathlib.PurePath(__file__).match('*.py'))                                              ## 当前文件路径是否有符合 ‘*.py’ 规则的文件


# print(pathlib.Path(__file__))
# print(pathlib.Path.cwd())                                                                    ## 返回当前目录的路径对象
# print(pathlib.Path.home())                                                                   ## 返回当前用户的home路径对象
# print(pathlib.Path.stat())                                                                   ## 返回路径信息, 同os.stat()
# print(pathlib.Path.chmod())                                                                  ## 更改路径权限, 类似os.chmod()
# print(pathlib.Path.expanduser())                                                             ## 展开~返回完整路径对象
# print(pathlib.Path.mkdir())                                                                  ## 创建目录
# print(pathlib.Path.rename())                                                                 ## 重命名路径
# print(pathlib.Path.rglob())                                                                  ## 递归遍历所有子目录的文件

# print(pathlib.Path.iterdir())                                                                ## 遍历目录的子目录或者文件
# print(pathlib.Path.is_dir())                                                                 ## 判断是否是目录
# print(pathlib.Path.glob())                                                                   ## 过滤目录(返回生成器)
# print(pathlib.Path.resolve())                                                                ## 返回绝对路径
# print(pathlib.Path.exists())                                                                 ## 判断路径是否存在
# print(pathlib.Path.open())                                                                   ## 打开文件(支持with)
# print(pathlib.Path.unlink())                                                                 ## 删除文件或目录(目录非空触发异常)

# print(pathlib.Path.match())                                                                  ## 测试路径是否符合pattern
# print(pathlib.Path.is_dir())                                                                 ## 是否是文件
# print(pathlib.Path.is_absolute())                                                            ## 是否是绝对路径
# print(pathlib.Path.is_reserved())                                                            ## 是否是预留路径
# print(pathlib.Path.exists())                                                                 ## 判断路径是否真实存在

# print(pathlib.Path.with_name())                                                              ## 更改路径名称, 更改最后一级路径名
# print(pathlib.Path.with_suffix())                                                            ## 更改路径后缀


# print(pathlib.Path.home() / 'dir' / 'file.txt', '==', pathlib.Path.home().joinpath('dir', 'file.txt'))
# print(os.path.join(os.path.dirname(os.getcwd()),"test","test.txt"))
# print(pathlib.Path.cwd().parent.joinpath("test","test.txt"))

# print(pathlib.Path('archive/demo.txt').stat())
# print(pathlib.Path('archive/demo.txt').stat().st_size)
# print(pathlib.Path('archive/demo.txt').stat().st_atime)
# print(pathlib.Path('archive/demo.txt').stat().st_ctime)
# print(pathlib.Path('archive/demo.txt').stat().st_mtime)

# print(pathlib.Path('archive/demo.txt').name)
# print(pathlib.Path('archive/demo.txt').stem)
# print(pathlib.Path('archive/demo.txt').suffix)
# print(pathlib.Path('archive/demo.txt').parent)
# print(pathlib.Path('archive/demo.txt').parents)
# print(pathlib.Path('archive/demo.txt').parts)
# print(pathlib.Path('archive/demo.txt').anchor)
# print(pathlib.Path('archive/demo.txt').root)

# print(pathlib.PurePath(),pathlib.PurePath('.'),pathlib.PurePath("C://./my_file.txt"),pathlib.PurePath("c://","e://","HDCZU_TEST"))

# print(pathlib.PureWindowsPath("C:/my_file.txt") == pathlib.PureWindowsPath("c:/my_file.txt"))



