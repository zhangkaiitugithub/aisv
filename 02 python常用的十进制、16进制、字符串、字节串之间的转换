https://blog.csdn.net/sinat_38682860/article/details/89890355
python常用的十进制、16进制、字符串、字节串之间的转换

Python 学习者 2019-05-06 20:11:27  32942  收藏 66
分类专栏： python 文章标签： python 算法
版权

python
专栏收录该内容
1473 篇文章97 订阅
订阅专栏
进行协议解析时，总是会遇到各种各样的数据转换的问题，从二进制到十进制，从字节串到整数等等

废话不多上，直接上例子

整数之间的进制转换:

10进制转16进制: hex(16)  ==>  0x10

16进制转10进制: int('0x10', 16)  ==>  16

类似的还有oct()， bin()

-------------------

字符串转整数:

10进制字符串: int('10')  ==>  10

16进制字符串: int('10', 16)  ==>  16

16进制字符串: int('0x10', 16)  ==>  16

-------------------

字节串转整数:

转义为short型整数: struct.unpack('<hh', bytes(b'\x01\x00\x00\x00'))  ==>  (1, 0)

转义为long型整数: struct.unpack('<L', bytes(b'\x01\x00\x00\x00'))  ==>  (1,)

-------------------

整数转字节串:

转为两个字节: struct.pack('<HH', 1,2)  ==>  b'\x01\x00\x02\x00'

转为四个字节: struct.pack('<LL', 1,2)  ==>  b'\x01\x00\x00\x00\x02\x00\x00\x00'

-------------------

字符串转字节串:

字符串编码为字节码: '12abc'.encode('ascii')  ==>  b'12abc'

数字或字符数组: bytes([1,2, ord('1'),ord('2')])  ==>  b'\x01\x0212'

16进制字符串: bytes().fromhex('010210')  ==>  b'\x01\x02\x10'

16进制字符串: bytes(map(ord, '\x01\x02\x31\x32'))  ==>  b'\x01\x0212'

16进制数组: bytes([0x01,0x02,0x31,0x32])  ==>  b'\x01\x0212'

-------------------

字节串转字符串:

字节码解码为字符串: bytes(b'\x31\x32\x61\x62').decode('ascii')  ==>  12ab

字节串转16进制表示,夹带ascii: str(bytes(b'\x01\x0212'))[2:-1]  ==>  \x01\x0212

字节串转16进制表示,固定两个字符表示: str(binascii.b2a_hex(b'\x01\x0212'))[2:-1]  ==>  01023132

字节串转16进制数组: [hex(x) for x in bytes(b'\x01\x0212')]  ==>  ['0x1', '0x2', '0x31', '0x32']

===================

测试用的python源码

import binascii
import struct
 
 
def example(express, result=None):
    if result == None:
        result = eval(express)
    print(express, '==>', result)
 
 
if _name_ == '_main_':
    print('整数之间的进制转换:')
    print('10进制转16进制', end=':');example("hex(16)")
    print("16进制结10进制", end=':');example("int('0x10'，16)")
    print("类似的还有octO, bin()")
 
    print("\n-------------------\n")
 
    print("字符串转整数:")
    print("10进制字符串", end=": ");example("int('10')")
    print("16进制字符串", end=": ");example("int('10', 16)")
    print("16进制字符串", end=": ");example("int('0x10', 16)")
 
    print("\n-------------------\n")
 
    print('字节串转整教:')
    print("转义为short型整数", end=": ");example(r"struct.unpack('< hh', bytes(b'\x01\x00\x00\x00'))")
    print("转义为1ong型整教" ,end=": ");example(r"struct.unpack('< L', bytes(b'\x01\x00\x00\x00'))")
 
    print("\n-Python学习交流QQ群：725638078-\n")
 
 
    print("整数转字节串: ")
    print("转为两个字节" , end=": ");example("struct.pack('<HH',1,2)")
    print("转为四个字节",end=": ");example("struct.pack('<LL',1,2)")
 
    print("\n-------------------\n")
 
    print('字符串装字节串:')
    print('字符串编码为字节码',end=": ");example(r"'12abc'.encode(' ascii')")
    print('数字或字符数组',end=": ");example(r"bytes([1, 2,ord('1'), ord('2')])")
    print('16进制字符串',end=': ');example(r"bytes().fromhex(010210')")
    print('16进制字符串',end=': ');example(r"bytes(map(ord,‘\x01\x02\x31\x32'))")
    print('16进制数组',end =': ');example(r'bytes([0x01, 0x02, 0x31, 0x32])')
 
    print("\n-Python学习交流QQ群：725638078-\n")
 
    print("字节串转字符串:")
    print('字节码解码为字符串',end=": ");example(r"bytes(b'\x31\x32\x61\x62').decode('ascii')")
    print('字节出传16进制表示,夹带ascii', end = ": "); example(r"str(bytes(b'lx01\x0212'))[2:-1]")
    print('字节串转16进制表示, 固定两个字符表示',end=": ");example(r"str(binasci.b2a_hex(b'\x01\x0212'))[2:-1]")
    print('字节串转16进制数组',end=": ");example(r"[hex(x) for x in bytes(b'\xO1\x0212')]")
 
    print("\n====================\n")



#字符串可以提供的参数 's' None

# format('some string','s')
# format('some string')

#整形数值可以提供的参数有 'b' 'c' 'd' 'o' 'x' 'X' 'n' None

# print(format(3,'b')) #转换成二进制
print(format(6583,'c')) #转换unicode成字符
# print(format(11,'d')) #转换成10进制
# print(format(272,'o')) #转换成8进制
# print(format(478,'x')) #转换成16进制 小写字母表示
# print(format(3430,'X')) #转换成16进制 大写字母表示
# print(format(11,'n')) #和d一样
# print(format(11)) #默认和d一样

#浮点数可以提供的参数有 'e' 'E' 'f' 'F' 'g' 'G' 'n' '%' None

# format(314159267,'e') #科学计数法，默认保留6位小数
# format(314159267,'0.2e') #科学计数法，指定保留2位小数
# format(314159267,'0.2E') #科学计数法，指定保留2位小数，采用大写E表示
# format(314159267,'f') #小数点计数法，默认保留6位小数
# format(3.14159267000,'f') #小数点计数法，默认保留6位小数
# format(3.14159267000,'0.8f') #小数点计数法，指定保留8位小数
# format(3.14159267000,'0.10f') #小数点计数法，指定保留10位小数
# format(3.14e+1000000,'F')  #小数点计数法，无穷大转换成大小字母

#g的格式化比较特殊，假设p为格式中指定的保留小数位数，先尝试采用科学计数法格式化，得到幂指数exp，如果-4<=exp<p，则采用小数计数法，并保留p-1-exp位小数，否则按小数计数法计数，并按p-1保留小数位数

# format(0.00003141566,'.1g') #p=1,exp=-5 ==》 -4<=exp<p不成立，按科学计数法计数，保留0位小数点
# format(0.00003141566,'.2g') #p=1,exp=-5 ==》 -4<=exp<p不成立，按科学计数法计数，保留1位小数点
# format(0.00003141566,'.3g') #p=1,exp=-5 ==》 -4<=exp<p不成立，按科学计数法计数，保留2位小数点
# format(0.00003141566,'.3G') #p=1,exp=-5 ==》 -4<=exp<p不成立，按科学计数法计数，保留0位小数点，E使用大写
# format(3.1415926777,'.1g') #p=1,exp=0 ==》 -4<=exp<p成立，按小数计数法计数，保留0位小数点
# format(3.1415926777,'.2g') #p=1,exp=0 ==》 -4<=exp<p成立，按小数计数法计数，保留1位小数点
# format(3.1415926777,'.3g') #p=1,exp=0 ==》 -4<=exp<p成立，按小数计数法计数，保留2位小数点
# format(0.00003141566,'.1n') #和g相同
# format(0.00003141566,'.3n') #和g相同
# format(0.00003141566) #和g相同


s = 'hello tttt'

print(f's is {s:3s}')
print(f's is {s:.4s}')
print(f's is {s:8.3}')
print(f's is {s:8.4s}')
