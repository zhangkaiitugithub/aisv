


dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'm': 8}

co = set(dic.keys())&set(['b','d','a','c','f','g'])
li = set(dic.keys())-set(['b','d','a','c','f','g'])
kk = list(co)+list(li)

k2 = {k:dic[k] for k in kk}


# dict update() 方法的使用方法：

D = {'one': 1, 'two': 2}
 
D.update({'three': 3, 'four': 4})  # 传一个字典
print(D)
 
D.update(five=5, six=6)  # 传关键字
print(D)
 
D.update([('seven', 7), ('eight', 8)])  # 传一个包含一个或多个元祖的列表
print(D)
 
D.update(zip(['eleven', 'twelve'], [11, 12]))  # 传一个zip()函数
print(D)
 
D.update(one=111, two=222)  # 使用以上任意方法修改存在的键对应的值
print(D)


# updata方法是没有返回值的（返回值为None），不能直接赋值返回值给变量

dict1 = {1: "彭鎏", 2: "彭大根"}
dict3 = dict1.update({8: "PLUS"})
print(dict3)

dict1.update({8: "PLUS"})
dict3 = dict1
print(dict3)


# import json,yaml

# ttt = '''
#     proxies:
#       -
#         name: v2|香港01|MPTCP|★★★
#         type: ss
#         server: 3urbvz0srnta639sdy2s8jimfnpgegqmf6p45gnq.k1h8.top
#         port: 54721
#         cipher: aes-128-gcm
#         password: 14766e02e778
#         udp: false
#         plugin: obfs
#         plugin-opts:
#           mode: http
#           host: uhb4t4il5budgsyzamn2wm6l7.sina.cn
#       -
#         name: v2|香港01|MPTCP|★★★
#         type: ss
#         server: 3urbvz0srnta639sdy2s8jimfnpgegqmf6p45gnq.k1h8.top
#         port: 54721
#         cipher: aes-128-gcm
#         password: 14766e02e778
#         udp: false
#         plugin: obfs
#         plugin-opts:
#           mode: http
#           host: uhb4t4il5budgsyzamn2wm6l7.sina.cn      
#     '''
# print(yaml.load(ttt,Loader = yaml.SafeLoader))

# yyy = '''
#     proxies:
#       - {name: 🇦🇺 AU_55 |23.07Mb, server: 129.154.48.221, port: 37372, type: vmess, uuid: 6f4454a9-e732-46c6-c50f-73f13da31f7b, alterId: 0, cipher: auto, tls: false, skip-cert-verify: false}
#       - {name: 🇦🇺 AU_56 |24.13Mb, server: 152.67.102.225, port: 46360, type: vmess, uuid: 61fe4d4e-8c7e-4f2e-9b9f-49f38991be7d, alterId: 0, cipher: auto, tls: false, skip-cert-verify: false}
#     '''
# print(yaml.load(ttt,Loader = yaml.SafeLoader))

# json_data = {'name': '一条大河',
#        'age': 1956,
#        'job': ['Singer','Dancer']}
 
# print(yaml.dump(json_data, default_flow_style=False).encode('utf-8').decode('unicode_escape').replace('"',''))
# print(yaml.dump(json_data, default_flow_style=True).encode('utf-8').decode('unicode_escape').replace('"',''))



import re, yaml

# bb = '{name: b[  ]ei, k[]u, i003, server: @AZQT001.xiba1.xyz, port: *20741, type: tro[000]jan, password: 965425cb-5d9e-306a-94bf-9961dd0ecf17, ws-path: /t, ws-headers: {Host: %7B%22Edge%22:%22c68b799.fm.huawei.com:50307%22,%22Host%22:%22tls.apple.com%22%7D}}'
# bb = '{name: ^GLaDO,S-Porta,lgu,n-08, server: *c68b799.v9.gladns.com, port: @3331, type: !vmess, uuid: !57e0cb4d-eae5-48ec-8091-149dc2b309e0, alterId: ?0, cipher: [auto], tls: tr,ue, skip-cert-verify: true, network: ws, ws-path: /t, ws-headers: {Host: {Edge:c68b799.fm.huawei.com:50307,Host:tls.apple.com}}, udp: true}'
bb = '{name: !香港-tg:频, 道:@bpjzx2-1, server: *c68b799.v9.gladns.com, port: @3331, type: !vmess, uuid: !57e0cb4d-eae5-48ec-8091-149dc2b309e0, alterId: ?0, cipher: [auto], tls: tr,ue, skip-cert-verify: %tr ue, network: ws, ws-path: /t, ws-headers: {Host: {Host: %7B%22Edge%22:%22c68b799.fm.huawei.com:50307%22,%22Host%22:%22tls.apple.com%22%7D}}, udp: true}'
bb = '{name: [LV1·解锁] 狮城04 | 中转 001, server: pp1.zhengzhongfeizhu.xyz, port: 43960, type: vmess, uuid: 2f606ee8-3cfa-30b2-a191-f88efe912f5c, alterId: 1, cipher: auto, tls: false, skip-cert-verify: false, network: ws, ws-opts: {path: /j20-sp4, headers: {Host: %7B%22Host%22:%22pp1.zhengzhongfeizhu.xyz%22%7D}}, udp: true}'

# # line = re.sub(r'name: *([^:]*?[\[\]?,][^:]*?)(, *\b\w*?:)',r'name: "\1"\2',bb)
# # line = re.sub(r': ([?!%@^*](?:.(?!: )+?[%,])\S*?|(?:[^:]*?[\[\]?%,])+[^:]*?)(,|}|$)', r': "\1"\2', bb)
# line = re.sub(r': ([?!%@^*][^:]*?|(?:[^:]*?[\[\]?%,])+[^:]*?|%(?:[^ ]*?[\[\]?%,])+[^ ]*?)(,|}|$)', r': "\1"\2', bb)
# line = re.sub(r': ([!@*](?:.(?!: ))*?|[!@*]?(?:(?:.(?!: ))*?[\[\]?%,])+(?:.(?!: ))*?)(, |}|$)', r': "\1"\2', bb)
# line = re.sub(r': ([!@*]?(?:(?:[^{](?!: ))*?[\[\]?%,])+(?:.(?!: ))*?|[!@*](?:.(?!: ))*?)(,|}|$)', r': "\1"\2', bb)
line = re.sub(r': ([!@*]?(?:(?:[^{](?!: ))*?(?:[\[\]?%,]|\d[eExX]\d))+(?:.(?!: ))*?|[!@*](?:.(?!: ))*?)(,|}|$)', r': "\1"\2', bb)

print(line)
print(yaml.safe_load(line))
# print(yaml.dump(line,width = 750))




# import json

# lis = '["item1", {"key1": ["item2", null, 1.0, 2]},[4,5,6]]'

# dic = '''
# name:jack
# age:28
# work:painter
# '''

# data1 = json.dumps(lis)              # dumps可以格式化所有的基本数据类型为字符串
# print(data1)
# data2 = json.loads(data1)              # loads 字符串还原为Python对象
# print(data2)
# print('----------------------------------')
# data1 = json.dumps(dic)              # dumps可以格式化所有的基本数据类型为字符串
# print(data1)
# data2 = json.loads(data1)              # loads 字符串还原为Python对象
# print(data2)


'''------------------------------------------------------------------------------------------'''


import sys
from ruamel.yaml import YAML
from ruamel.yaml.comments import CommentedMap as ordereddict

data = {'@': {'%':'%',1:[{1:1,2:2,3:3},['A','B','C']],'#':{'#':{'#':'#'}}}, '口':['曰','田']}
yml = YAML()
yml.indent(mapping=6, sequence=(20), offset=(20-2))         ## {}=mapping,[]=sequence,offset = '-'(单列符)
yml.dump(data, sys.stdout)

# # # yaml = YAML(typ='safe')
# # # print(dir(yaml))
# # # # yaml.indent(mapping=2, sequence=4, offset=2)
# # # dts = yaml.load("""a:\n  b: 2\n  c: 3\n""")

# # # print(dts)
# # # # yaml.dump(dts,sys.stdout)

# print('---------------------------------------------------------------------------')


# data = '''
#     name:
#         family: Smith,   # very common
#         given: Alice    # one of the siblings
#     "str": "Hello world."
#     "int": 110
#     "list": [10, "she", ["he", "it"]]
#     "dict": {"account":"xiaoqq", "password": {"pwd1": 123456, "pwd2": "water"}}
#     "tuple": (100, "a")
#     #projects:
#     #  - name: A1
#     #    dir: B1
#     #    aplan:
#     #        when: ["X", "Y", "Z"]
#     #    wflow: l
# '''


# # print(os.path.abspath(ruamel.yaml.__file__)) 
# # print(help(ruamel.yaml.main))

# # ''' yaml = YAML(typ='safe',pure = True)             ##typ='safe' 返回无序字典:{}
# #     code = yaml.load(data)
# #     print(code)
# #     code['name']['given'] = 'Bob'
# #     yaml.indent(mapping=2, sequence=4, offset=2)
# #     yaml.dump(code, sys.stdout)
# # '''

# yaml = YAML()                                       ##不加typ='safe'返回有序字典：ordereddict(),实际为列表，可按列表操作
# code = yaml.load(data)
# # print(code)

# # # yaml.preserve_quotes = True
# # # yaml.width = 4096
# # print(type(data['projects'][0])) # would give: <class 'ruamel.yaml.comments.CommentedMap'>

# # code['name']['given'] = 'Bob'
# # code.insert(1, 'last name', {'Vandelay': 18})
# yaml.indent(mapping=2, sequence=4, offset=2)


# # ref = code['projects']

# # record_to_add = dict(name='A2', dir='B2',
# #                      aplan=dict(when=["X", "Y", "Z"]), wflow='l')
# # ref.append(record_to_add)

# # record_to_add_2 = ordereddict([('name', 'A3'), ('dir', 'B3'), ('aplan', ordereddict(
# #     [('when', ['X', 'Y', 'Z'])])), ('wflow', 'l')])
# # ref.append(record_to_add_2)

# yaml.dump(code, sys.stdout)

# print('---------------------------------------------------------------------------')


import sys
from ruamel.yaml import YAML

inp = """\
- &CENTER {a: 1, b: 2}
- &LEFT {c: 0, d: 2}
- &BIG {e: 10}
- &SMALL {f: 1}
# All the following maps are equal:
# Explicit keys
- A: 1
  B: 2
  C: 10
  label: AAA
# Merge one map
- <<: *CENTER
  D: 10
  label: BBB
# Merge multiple maps
- <<: [*CENTER, *BIG]
  label: CCC
# Override
- <<: [*BIG, *LEFT, *SMALL]
  x: 1
  label: center/big
"""

yaml = YAML()
data = yaml.load(inp)
print(data)
print('-------------------------------------------------------------------')
yaml.indent(mapping=2, sequence=(4), offset=(2))
yamltostr = yaml.dump(data,sys.stdout)


# import json,sys
# # import ruamel.yaml as myyml
# from ruamel.yaml import YAML,round_trip_load,round_trip_dump
# yaml = YAML()                               ## typ='safe',pure=True 这两个影响dump的结果和排版
# # yaml.default_flow_style = False           ## 这一个影响dump的结果和排版
# # # yaml.default_style = "'"
# # # yaml.preserve_quotes = True
# # # yaml.encoding = None



# my_dic = {
#         'host1': '123',
#         'host2': 456,
#         'host3': {'asd': '123'},
#         'host4': [12, '234', ['wer', 234]],
#         'host5': {'asd': '123', 'eee': [12, '234', ['wer', 234]]}
#         }
 

# # loml = yaml.load(str(my_dic))
# # print(loml)
# yaml.indent(mapping = 2,sequence = 4,offset = 2)
# yaml.dump(my_dic,sys.stdout)


# js = json.loads(json.dumps(my_dic))
# yaml.indent(mapping = 2,sequence = 8,offset = 6)
# yaml.dump(js,sys.stdout)


# # # rtl = round_trip_load(str(my_dic))
# rtd = round_trip_dump(my_dic,default_flow_style=False, indent=2, block_seq_indent=2)   
# print(rtd)


# # # lod = myyml.load(str(my_dic), Loader=ruml.RoundTripLoader,preserve_quotes=None)
# dmp = myyml.dump(my_dic, default_flow_style=False, allow_unicode=True, Dumper=myyml.RoundTripDumper, indent=2, block_seq_indent=2)    
# print(dmp)


'''------------------------------------------------------------------------------------------------------------------------------------'''

# document = """
# ---
# block sequence:
#   - BlockEntryToken
# block mapping:
#   ? KeyToken
#   : ValueToken
# flow sequence: [FlowEntryToken, FlowEntryToken]
# flow mapping: {KeyToken: ValueToken}
# anchors and tags:
#    - &A !!int '5'
#    - *A
# ...
# """
# # scan()
# import yaml
# for token in yaml.scan(document):
#     print(token)



'''------------------------------------------------------------------------------------------------------------------------------------'''


# import sys
# import ruamel.yaml

# yaml_str = """\
# f: 3
# e: 
# - 11     # sequences can have nodes that are mappings
# - 22
# - x: A
#   y: 30
#   z: 
#     m: 51  # this should be last
#     l: 50
#     k: 49  # this should be first 
# d: 1
# """

# def recursive_sort_mappings(s):
#     if isinstance(s, list):
#         for elem in s:
#             recursive_sort_mappings(elem)
#         return 
#     if not isinstance(s, dict):
#         return
#     for key in sorted(s, reverse=True):
#         value = s.pop(key)
#         recursive_sort_mappings(value)
#         s.insert(0, key, value)


# yaml = ruamel.yaml.YAML()
# data = yaml.load(yaml_str)

# recursive_sort_mappings(data)
# yaml.dump(data, sys.stdout)



