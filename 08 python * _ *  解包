



# list1 = [0]*10
# print(list1)

# a,b,c = 'abc'
# print(a,b,c)

# a,b,c = ('a', 'b', 'c')
# print(a,b,c)

# (a, b), (c, d) = (1, 2), (3, 4)
# print(a,c)
# print(a, b, c, d)

# a,b,c = enumerate(['a', 'b', 'c'])
# print(a)

# a,b,c = {'a':1, 'b':2, 'c':3}.items()
# print(a)

# a,b,c = (x + 1 for x in range(3))
# print(a,b,c)

# # 自动解包支持一切可迭代对象，函数调用时，可以用 * 或者 ** 解包可迭代对象，作为参数传递
# *a, = 1, 2
# print(*a)

# a = [1,2,3,4]
# print(*a)

# a, b, *c = 0, 1
# print(*c)

# a, *b, c = 0, 1
# print(*b)

# a,*b,c = (1,2,3,4)
# print(a,b,c)

# print(*['a','b'],*['c'])

# print(*['a','b'],{**{'a':1,'b':2},**{'c':1,'d':2}})

# print(*range(10))  

# print(*zip(['a','b'],[1,2,3,4]))

# print([x for x in zip(['a','b','c'],[1,2,3])])

# print([args for name, *args in [('Bob', '1990-1-1', 60),('Mary', '1996-1-4', 50),('Nancy', '1993-3-1', 55)]])

# print([5 for _ in range(10)])

# name, *_, (*_, year) = ('Bob', 20, 50, (11, 20, 2000))  ## 当一些元素不用时，用_表示是更好的写法，可以让读代码的人知道这个元素是不要的
# print(year)

# s = 'ABCDEFGH'
# while s:
#    x, s = s[0], list(s[1:])
#    print(x, s)

s = 'ABCDEFGH'
while s:
   x, *s = s
   print(x, s)

# A ['B', 'C', 'D', 'E', 'F', 'G', 'H']
# B ['C', 'D', 'E', 'F', 'G', 'H']
# C ['D', 'E', 'F', 'G', 'H']
# D ['E', 'F', 'G', 'H']
# E ['F', 'G', 'H']
# F ['G', 'H']
# G ['H']
# H []



lst = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 0], [11, 22, 33]] 
merge_list = [j for i in lst for j in i]  # 先执行第一个for循环 
print(merge_list) 




# print(dict(a=1,b=2))
# print(dict([('cer', 1.5), ('broi', 1.2), ('lete', 2.1)]))
# print(dict([['BMW', 8.5], ['BENS', 8.3], ['AUDI', 7.9]]))
# print(dict(**{'x': 1}, **{'y': 3}, k=2))  #不能有重复key
# print(dict({'x': 1}, **{'x': 3}, k=2))
# print({**{'x': 1}, **{'x': 3}, 'k': 5})


# print(dict([('a', 1), ('b', 2), ('c', 3)], d=4,e=5))
# print(dict({'a': 1, 'b': 2, 'c': 3}, **{'d':4,'e':5}))
# print(dict(zip(['x', 'y', 'z'], [1, 2, 3]), d=4))


# x = {'a': 1, 'b': 2}
# y = {'b': 3, 'c': 4}
# print({**x, **y})
# print(dict(x, **y))
# print(dict(x.items() &  y.items()))
# print(dict(x.items() |  y.items()))
# print(dict(x.items() and y.items()))
# print(dict(x.items() or y.items()))

# # Be careful with this though.  It only performs a shallow copy.  If you have embedded dictionaries and need a copy, make sure and do a deep copy.
# x = {'a' : 1, 'b' : 2, 'c' : {'num' : 3, 'ex_word' : 'cat'}}
# y = {'d' : 3, 'e' : 4, 'f' : 5}
# z = {**x, **y}
# print(z)

# # if we change the example word in `x` for 'c', it changes in `z` and vice versa.
# x['c']['ex_word'] = 'car'
# print(z)
# z['c']['ex_word'] = 'cow'
# print(x)


# from collections import OrderedDict

# a = {"a": 1, "b": 2}
# b = {"b": 2, "a": 1}
# c = OrderedDict({"a": 1, "b": 2})
# d = OrderedDict({"b": 2, "a": 1})

# print(a == b)  # True
# print(c == d)  # False
# print(a == c)  # True
# print(a == d)  # True

