######################################Python函数参数的值传递机制##################################

# 值传递和引用传递的区别是，函数参数进行值传递后，若形参的值发生改变，不会影响实参的值；而函数参数继续引用传递后，改变形参的值，实参的值也会一同改变。


# def swap(a , b) :
#     # 下面代码实现a、b变量的值交换
#     a, b = b, a
#     print("swap函数里，a的值是",a, "；b的值是", b)
#     a = b = None
# a = 6
# b = 9
# swap(a , b)
# print("交换结束后，变量a的值是", a , "；变量b的值是", b)

# # 如果实际参数的数据类型是可变对象（列表、字典），则函数参数的传递方式将采用引用传递方式。需要注意的是，引用传递方式的底层实现，采用的依然还是值传递的方式。

# def swap(dw):
#     # 下面代码实现dw的a、b两个元素的值交换
#     dw['a'], dw['b'] = dw['b'], dw['a']
#     print("swap函数里，a元素的值是",dw['a'], "；b元素的值是", dw['b'])
#     dw = None
# dw = {'a': 6, 'b': 9}
# swap(dw)

# print("交换结束后，a元素的值是",dw['a'], "；b元素的值是", dw['b'])


l=[1,2,3]
def a(x):
    # x.append(4)
    # x = x+[5,6]
    # x.pop()
    x = x+x
    x += x
    print(x)
a(l)
print(l)

# 创建可变对象永远是分配新地址,append,pop并不是创建新的可变对象，是对已有的可变对象进行修改。


