'''--------------------------------------------------------------------------------'''

################################## self 实例化指向 ################################

class Test:
    def sslf(self):
        print(self)
        print(self.__class__)

t = Test()
t.sslf()


# class person:

#     def __init__(self):
#         print(person,id(person))

#     def action(self):
#         # print(person,id(person))
#         # print(self)
#         print('self关键字:',id(self))
#         pass
#     pass
# person().action()
# boy = person()
# boy.action()
# girl = person()
# girl.action()
# print('boy实例化对象:',id(boy))
# print('girl实例化对象:',id(girl))

# When an instance method object is called, the underlying function (__func__) is called, inserting the class instance (__self__) in front of the argument list. For instance, when C is a class which contains a definition for a function f(), and x is an instance of C, calling x.f(1) is equivalent to calling C.f(x, 1).
# When an instance method object is derived from a class method object, the “class instance” stored in __self__ will actually be the class itself, so that calling either x.f(1) or C.f(1) is equivalent to calling f(C,1) where f is the underlying function.

# class MyClass:

#     """A simple example class"""

#     i = 12345

#     def f():
#         return 'hello fffff'
#     def g(self):
#         return 'hello ggggg'

# x = MyClass()
# print(x.f)
# print(x.f())
# print(MyClass.f())
# print(MyClass().f())
# print(x.g)
# print(x.g())
# print(MyClass.g())
# print(MyClass().g())
# print(type(x.f))
# print(type(MyClass.f))
# print(type(MyClass().f))
# print(type(x.g))
# print(type(MyClass.g))
# print(type(MyClass().g))

# print(MyClass().g.__func__)
# print(MyClass().g.__func__.__get__(MyClass))



