

#-------------------------------------------------------------------------------------------------
# 推导式：


# aa = {'uu':'uuuuuuu','ii': 'iiiiiiiiii','oo':'ooooooooo', 'pp':'pppppppppp', 'mm': 'mmmmmmmm','nn': 'nnnnnnnnnnn'}
# bb = ['oo','mm','ii','123','456']

# cc = {k:aa[k] for k in bb if k in aa}
# cc.update(aa)
# print(cc)

# dd = {k:aa[k] for k in bb+[x for x in aa if x not in bb] if k in aa}
# print(dd)


# print([i for i in'bc123' if i != '2' if i!='3'])  

# print([(x,y) for x in range(5) if x%2==0 for y in 'abcd' if y!='a']) 
# print([x**y+z for x in range(2) for y in range(3) for z in range(4)])

# names = [['Billy', 'Jefferson', 'Andrew', 'Wesley', 'Joe'],['Steven', 'Alice', 'Jennifer', 'Eva', 'Sherry']]
# print([name for i in names for name in i if name.count('e') >= 2])


print([i for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for i in row])
print([row[i] for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for i in range(3)])
# for row in matrix:
#     for i in row:
#         l.append(i)

print([[row[i] for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]] for i in range(3)])
# for i in range(3):
#     temp = []
#     for row in matrix:
#         temp.append(row[i])
#     l.append(temp)


# 列表推导式遍历顺序为自右而左，先遍历 for 后的可迭代对象，然后根据 for 前的表达式进行运算，最终生成新的列表。
# 如果有 if 条件语句，for 遍历后即进行条件判断。
# 如果有多个 for 循环，则最终的对象个数为多个 for 循环的笛卡尔积。
# 嵌套的列表推导式，与嵌套 for 循环的原理相同。

# 有时，面对长长的推导式，可采用断行的方式予以处理，以便理解。 

# evens = [
#     i 
#     for i in range(10) 
#     if i % 2 == 0
# ]
 
# [
#     name 
#     for i in names 
#     for name in i 
#     if name.count('e') >= 2
# ]
 
# 如果把列表推导式的 [] 替换为 ()，则变为生成器（generator ）表达式。



#-------------------------------------------------------------------------------------------------
# 迭代器：

from collections.abc import Iterable,Iterator


# a = [1,2,3,4]

# print(issubclass(list,Iterable))

# print(isinstance(a, Iterable))
# print(isinstance(a, Iterator))

# print(a.__iter__())

# print(Iterable.__abstractmethods__)


# print(iter(a))
# print(isinstance(iter(a), Iterator))

# b = iter(a)
# print(dir(a))
# print('-'*60)
# print(dir(b))
# print(iter(b) is b)



# # mylist = [x*x for x in range(3)]
# # print(mylist)
# mygenerator = (x*x for x in range(3))
# # print(mygenerator)
# # print(next(mygenerator))
# aList = [123, 'xyz', 'zara', 'abc', 123]
# # aList.extend(mygenerator) # python 内置函数list,sum等认识迭代器并运行
# aList += mygenerator
# print('新列表: ', aList)

# language_tuple = ('Spanish', 'Portuguese')
# language_set = {'Chinese', 'Japanese'}
# aList.extend(language_tuple)
# aList.extend(language_set)
# print('新列表: ', aList)


# print('-------------------------------------------------')

# iter_l = [1,2,3,4,5,6].__iter__()

# print('迭代器中元素的长度: ',iter_l.__length_hint__())

# print('根据索引值指定从哪里开始迭代: ',iter_l.__setstate__(2))

# print(list(iter_l))
# print('**',iter_l.__next__())
# print('***',iter_l.__next__())



# import itertools

# print(*itertools.islice('adfasdfa',1,5,1))
 
# er = itertools.count()
# print(next(er))
# print(next(er))

# iterator = (itertools.count(start = 1, step = 2))                    # 使用时必须格外小心itertools.count(),因为很容易陷入无限循环
# print(*list(next(iterator) for _ in range(5)))

# print(*zip(itertools.count(start = 1,step = 4), ['a','b','c']))


# print(*itertools.product('ABCD', 'xy'))


# print([item for item in itertools.product("abc", repeat=2)])

# print(*map(lambda x, y, z: (x, y, z), range(0, 3), range(3, 6), range(6, 9)))

# print(list(map(pow, range(10), itertools.repeat(2)))) 

# print(list(itertools.chain(['a', 'b', 'c'],{0, 0, 1})))


# print([data for data in list(itertools.combinations([1,3,5,7,9,11,13,15], 3)) if sum(data) == 35])


# print('-------------------------------------------------')

# # 并行迭代
# 情景假设：某个班级的数学成绩，英语成绩，语文成绩分别存在一个列表中，求每个学生的总分
# 对于并行迭代可以使用zip函数
# from random import randint
# chinese = [randint(60, 100) for _ in range(40)]
# math = [randint(60, 100) for _ in range(40)]
# english = [randint(60, 100) for _ in range(40)]
# total = []
# for x, y, z in zip(chinese, math, english):
#     total.append(x + y + z)
# print(total)

# # # 串行迭代:
# # 情景假设：若干个班级的数学成绩存在多个列表中，求分数高于80分的人
# # 对于串行迭代可以使用itertools.chain函数
# from itertools import chain
# class1 = [randint(60, 100) for _ in range(40)]
# class2 = [randint(60, 100) for _ in range(40)]
# class3 = [randint(60, 100) for _ in range(40)]
# num = list(filter(lambda x: x >= 80, chain(class1, class2, class3)))
# print(num)


# print('-------------------------------------------------')


# 0. 只有__getitem__方法，不是迭代器，但能执行for in 语句

# class abor():
#     def __getitem__(self,idx):  # idx默认0到无穷的序号，for_i_in的i的序号 
#         return idx
# cd =abor()
# print (isinstance(cd,Iterable))
# print (isinstance(cd,Iterator))
# for i in cd:
#     print(i)


# 1. 只有__iter__方法，是可迭代对象，但不是迭代器

# class aber():
#     def __iter__():
#         pass
# ab =aber()
# print (isinstance(ab,Iterable))
# print (isinstance(ab,Iterator))


# # 只要定义__next__方法，就能执行next(), 但不是迭代器
# class Person:
#     def __init__(self, persion_list):
#         self.persion_list = persion_list
#         self.num = 0
#     def __next__(self):
#         self.num += 1
#         return self.persion_list[self.num]

# ps = Person(['abc','def','hj','ik','you'])

# print(next(ps))
# print(next(ps))


# class aber():
#     def __iter__(self):
#         pass
#     def __next__(self):
#         pass
# ab =aber()
# print (isinstance(ab,Iterable))
# print (isinstance(ab,Iterator))

# for i in ab:
#     print (i)


# 1. 用iter（body）的时候首先找到 __iter__方法，由于我们返回的不是的个iterator所以报错
# 2. __iter__方法找不到，它会继续找 是否有模拟返回迭代器呢
# 3. 如果你把__iter__注销掉,它会找到__getitem__,自动创建__next__方法，所以依然生成迭代器

# class Person:
#     def __init__(self, persion_list):
#         self.persion_list = persion_list
#     # def __iter__(self):
#     #     return  1   # self
#     def __getitem__(self, item):
#         return self.persion_list[item]

# body = Person(["Xiuwu", "Adny", "Maggie"])
# body=iter(body)
# print(next(body))


# 如果继承了 Iterator类 ，iter 方法 可以删除.如下：

# class Person:
#     def __init__(self, persion_list):
#         self.persion_list = persion_list
#     def __iter__(self):
#         return  Myiterator(self.persion_list)   #调用我们重写的迭代器方法
#     #def __iter__(self):
#      #   return  1
#     #def __getitem__(self, item):   #把这个方法用我们自己写的迭代器方法替代.
#      #   return self.persion_list[item]  
# class Myiterator(Iterator):         #继承Iterator 就不需要写__iter__,直接调用父类的.
#     def __init__(self,persion_list):
#         self.persion_list=persion_list  
#         self.index=0      #由于iterator 是没有index 的，这个要我们手动添加
#     def __next__(self):   #这个就是迭代器的取值逻辑 
#         while True:      #当为false 的时候结束循环
#             try:
#                 word = self.persion_list[self.index]      #取值动作 
#             except IndexError:   #index 当变得超出persion_list 会报错的 ，先抓住这个异常
#                 raise StopIteration     #迭代到没有值要用这异常，咱们把异常做个转化 
#             self.index = self.index + 1   #递增我们的index
#             return word   #返回取到的值


# body = Person(["Xiuwu", "Adny", "Maggie"])

# a=iter(body)    #调用我们自定义的迭代器方法 
# print(a)        # <__main__.Myiterator object at 0x00000000022399B0>  
#                 #从打印结果看说明我们自定义的迭代器方法生效了，已经返回一个迭代器

# print(next(a))  #Xiuwu  
                       #从打印结果我们判断出 __next__生效，如果想循环输出，自己试试for 循环.




'''------------------------------------------------------------------------------------------------'''
# 生成器:


# def h():
#     print ('Wen Chuan')
#     m = yield 5  # Drinking!
#     print ('yd: ',m)
#     print ('We are drinking!')
#     d = yield 12
#     print ('yd: ',d)
#     print ('We are together!')
# c = h()                                              # h()被调用后并没有执行，因为它有yield表达式，因此，我们通过next()语句让它执行。next()语句将恢复Generator执行，并直到下一个yield表达式处
# print(c)

# # print(next(c),'\n------------')                      # 相当于c.send(None)
# # print(next(c),'\n------------')
# # print(next(c),'\n------------')

# print(c.send(None),'\n------------')
# print(c.send('Drinking!'),'\n------------')          # (yield 5)表达式被赋予了'Drinking!'
# print(c.send('Fighting!'),'\n------------')          # (yield 12)表达式被赋予了'Fighting!'

# # c.send(None)
# # c.send('Drinking!')                                  # (yield 5)表达式被赋予了'Fighting!'
# # c.send('Fighting!')


# def func():
#     print ('forloop:')
#     for i in range(10):
#         print(f'--------i:   {i}')
#         a = yield i
#         print(f'========{a} {i}')
# f = func()
# print(f) # 此时生成器还没有运行
# print(next(f))
# print(next(f))
# # print(next(f))


# def fib(n):
#     index = 0
#     a = 0
#     b = 1

#     while index < n:
#         yield (f'index : {index}',b)
#         a,b = b, a+b
#         index += 1
#         print (f'--index : {index}')

# fib = fib(4)
# print(fib)
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))
# print(next(fib))


# import sys
# def Fibonacci(n):
#     a, b, counter = 0, 1, 0
#     while True:
#         if(counter > n):
#             return
#         sm = yield counter,a
#         a, b = b, a + b
#         counter += 1
#         print('yienum:',sm)
# f = Fibonacci(15)
# sdnum = -1
# while True:
#     try:
#         # print(sdnum,next(f), end="\n")
#         sendarms = [None,0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
#         sdnum += 1 
#         print(sendarms[sdnum],' : ',f.send(sendarms[sdnum]), end="\n")
#     except StopIteration:
#         sys.exit()


# import sys,time
# def fib(n):
#     a,b,index = 0,1,0
#     while index < n:
#         sleep = yield b
#         print('等待%s秒' %sleep)
#         time.sleep(sleep)
#         a,b = b, a+b
#         index += 1

# fib = fib(20)
# print(fib.send(None))   # 效果等同于print(next(fib))
# while True:
#     try:
#         print(fib.send(2), end="\n")
#     except StopIteration:
#         sys.exit()


# def fun_inner():
#     i = 0
#     while True:
#         print('*************')
#         i = yield 'inner: ',i
#         print('-------------')
# def fun_outer():
#     a = 0
#     b = 1
#     print('=============')
#     inner = fun_inner()
#     inner.send(None)
#     print('. . . . . . .')
#     while True:
#         a = inner.send(b)
#         b = yield a

# outer = fun_outer()
# outer.send(None)
# for i in range(5):
#     print(outer.send(i))


# def fun_inner():
#     i = 0
#     while True:
#         i = yield i
# def fun_outer():
#     yield from fun_inner()

# if __name__ == '__main__':
#     outer = fun_outer()
#     outer.send(None)
#     for i in range(5):
#         print(outer.send(i))


# for i in range(1,10):
#     for j in range(1,i+1):
#         if j<i:
#             print(i,'*',j,'=',i*j,end='  ')
#         else:
#             print(i,'*',j,'=',i*j)


# def chain(*args):
#     for i in args:
#         # for m in i:
#         #     yield m
#         yield from i
# p = list(chain("1234", "AB", [1, 2, 3, 4, 5]))
# print(p)







# def average():

#     total  = 0
#     number = 0
#     average = None
#     while True:
#         print('==================================')        
#         term=yield
#         print('----------------------------------')
#         print('average: ', average, 'term: ', term)

# process=average()
# next(process)           # 预激协程
# process.send(5)         # 输出5
# process.send(10)        # 输出7.5


# def average():

#     total  = 0
#     number = 0
#     average = None
#     while True:
#         print('==================================')        
#         term=yield average
#         print('----------------------------------')
#         print('average: ', average, 'term: ', term)

# process=average()
# next(process)           # 预激协程
# process.send(5)         # 输出5
# process.send(10)        # 输出7.5


# def average():

#     total  = 0
#     number = 0
#     average = None
#     while True:
#         print('==================================')        
#         term=yield average
#         print('----------------------------------')
#         print('average: ', average, 'term: ', term)
#         total  += term
#         number += 1
#         average = total/number
#         print('average: ', average, 'term: ', term)

# process=average()
# next(process)           # 预激协程
# process.send(5)         # 输出5
# process.send(10)        # 输出7.5

# # 小结：协程执行首先需要预激，使之准备好然后让步控制权。具体地说，协程在yield关键字所在的位置暂停执行。
# # 在term=yield average这个赋值语句中，右边的代码会在赋值之前执行。 
# # 在暂停结束后，从先前阻塞的那行代码开始，将yield 表达式的值赋给左边的变量。




# ---------------------------------------------------------------------------------------------------------------------------------


def generator2():
    yield 'a'
    yield 'b'
    yield 'c'
    yield from [11,22,33,44]  # yield from iterable本质上等于 for item in iterable: yield item的缩写版
    yield from (12,23,34)
    yield from range(3)
 
for i in generator2():
    print(i,end=', ')
    

#利用yield from语句向生成器（协程）传送数据
#传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。
#如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，换回生产者继续生产，效率极高：
# import time
# def  consumer_work(len):
#     # 读取send传进的数据，并模拟进行处理数据
#     print("writer:")
#     w=''
#     while True:
#         w = yield w    # w接收send传进的数据,同时也是返回的数据
#         print('[CONSUMER] Consuming %s...>> ', w)
#         w*=len #将返回的数据乘以100
#         time.sleep(1) 
# def consumer(coro):
#     yield from coro#将数据传递到协程(生成器)对象中
  
# def produce(c):
#     c.send(None)# "prime" the coroutine
#     for i in range(5):
#         print('[Produce] Producing %s----', i)
#         w=c.send(i)#发送完成后进入协程中执行
#         print('[Produce] receive %s----', w)
#     c.close()
     
# c1=consumer_work(100)
# produce(consumer(c1))


# ---------------------------------------------------------------------------------------------------------------------------------

# 在使用yield生成器的时候，如果使用for语句去迭代生成器，则不会显式的出发StopIteration异常，而是自动捕获StopIteration异常，所以如果遇到return，只是会终止迭代，而不会触发异常，故而也就没办法获取return的值。如下：

# def my_generator():
#     for i in range(5):
#         if i==2:
#             return '我被迫中断了'
#         else:
#             yield i
 
# def main(generator):
#     try:
#         for i in generator:  #不会显式触发异常，故而无法获取到return的值
#             print(i)
#     except StopIteration as exc:
#         print(exc.value)
 
# g=my_generator()  #调用
# main(g)

# 使用next（g）一次一次迭代，则会显式触发异常，但要获取return的返回值，我需要如下操作：

# def my_generator():
#     for i in range(5):
#         if i==2:
#             return '我被迫中断了'
#         else:
#             yield i
 
# def main(generator):
#     try:
#         print(next(generator))   #每次迭代一个值，则会显式出发StopIteration
#         print(next(generator))
#         print(next(generator))
#         print(next(generator))
#         print(next(generator))
#     except StopIteration as exc:
#         print(exc.value)     #获取返回的值
 
# g=my_generator()
# main(g)

# 使用yield from来完成上面的同样的功能：

# def my_generator():
#     for i in range(5):
#         if i==2:
#             return '我被迫中断了'
#         else:
#             yield i
 
# def wrap_my_generator(wtor):  # 定义一个包装“生成器”的生成器，它的本质还是生成器
#     result=yield from wtor    # 自动触发StopIteration异常，并且将return的返回值赋值给yield from表达式的结果，即result
#     print(result)
 
# def main(mwtor):
#     for j in mwtor:
#         print(j)

# mg=my_generator()
# wra_my_g=wrap_my_generator(mg)
# main(wra_my_g)  #调用




def gen(*args, **kwargs):
    for item in args:
        yield item

def gen2(*args, **kwargs):
    for item in args:
        yield from item

if __name__ == '__main__':
    astr = "ABC"
    alist = [1, 2, 3]
    adict = {"nba": "湖人", "age": 18}
    # generate
    agen = (i for i in range(4, 8))

    new_list = gen(astr, alist, adict, agen)
    new_list2 = gen2(astr, alist, adict, agen)
    print(list(new_list))
    print(list(new_list2))

# yield和yield from后边加上可迭代对象的时候，yield from是将可迭代对象中的元素一个一个yield出来，而yield是直接yield的是可迭代对象




