

# import json

# lis = '["item1", {"key1": ["item2", null, 1.0, 2]},[4,5,6]]'

# dic = '''
# name:jack
# age:28
# work:painter
# '''

# data1 = json.dumps(lis)              # dumps可以格式化所有的基本数据类型为字符串
# print(data1)
# data2 = json.loads(data1)              # loads 字符串还原为Python对象
# print(data2)
# print('----------------------------------')
# data1 = json.dumps(dic)              # dumps可以格式化所有的基本数据类型为字符串
# print(data1)
# data2 = json.loads(data1)              # loads 字符串还原为Python对象
# print(data2)


'''------------------------------------------------------------------------------------------'''


import sys
from ruamel.yaml import YAML
from ruamel.yaml.comments import CommentedMap as ordereddict

data = {'@': {'%':'%',1:[{1:1,2:2,3:3},['A','B','C']],'#':{'#':{'#':'#'}}}, '口':['曰','田']}
yml = YAML()
yml.indent(mapping=6, sequence=(20), offset=(20-2))         ## {}=mapping,[]=sequence,offset = '-'(单列符)
yml.dump(data, sys.stdout)

# # # yaml = YAML(typ='safe')
# # # print(dir(yaml))
# # # # yaml.indent(mapping=2, sequence=4, offset=2)
# # # dts = yaml.load("""a:\n  b: 2\n  c: 3\n""")

# # # print(dts)
# # # # yaml.dump(dts,sys.stdout)

# print('---------------------------------------------------------------------------')


# data = '''
#     name:
#         family: Smith,   # very common
#         given: Alice    # one of the siblings
#     "str": "Hello world."
#     "int": 110
#     "list": [10, "she", ["he", "it"]]
#     "dict": {"account":"xiaoqq", "password": {"pwd1": 123456, "pwd2": "water"}}
#     "tuple": (100, "a")
#     #projects:
#     #  - name: A1
#     #    dir: B1
#     #    aplan:
#     #        when: ["X", "Y", "Z"]
#     #    wflow: l
# '''


# # print(os.path.abspath(ruamel.yaml.__file__)) 
# # print(help(ruamel.yaml.main))

# # ''' yaml = YAML(typ='safe',pure = True)             ##typ='safe' 返回无序字典:{}
# #     code = yaml.load(data)
# #     print(code)
# #     code['name']['given'] = 'Bob'
# #     yaml.indent(mapping=2, sequence=4, offset=2)
# #     yaml.dump(code, sys.stdout)
# # '''

# yaml = YAML()                                       ##不加typ='safe'返回有序字典：ordereddict(),实际为列表，可按列表操作
# code = yaml.load(data)
# # print(code)

# # # yaml.preserve_quotes = True
# # # yaml.width = 4096
# # print(type(data['projects'][0])) # would give: <class 'ruamel.yaml.comments.CommentedMap'>

# # code['name']['given'] = 'Bob'
# # code.insert(1, 'last name', {'Vandelay': 18})
# yaml.indent(mapping=2, sequence=4, offset=2)


# # ref = code['projects']

# # record_to_add = dict(name='A2', dir='B2',
# #                      aplan=dict(when=["X", "Y", "Z"]), wflow='l')
# # ref.append(record_to_add)

# # record_to_add_2 = ordereddict([('name', 'A3'), ('dir', 'B3'), ('aplan', ordereddict(
# #     [('when', ['X', 'Y', 'Z'])])), ('wflow', 'l')])
# # ref.append(record_to_add_2)

# yaml.dump(code, sys.stdout)

# print('---------------------------------------------------------------------------')


import sys
from ruamel.yaml import YAML

inp = """\
- &CENTER {a: 1, b: 2}
- &LEFT {c: 0, d: 2}
- &BIG {e: 10}
- &SMALL {f: 1}
# All the following maps are equal:
# Explicit keys
- A: 1
  B: 2
  C: 10
  label: AAA
# Merge one map
- <<: *CENTER
  D: 10
  label: BBB
# Merge multiple maps
- <<: [*CENTER, *BIG]
  label: CCC
# Override
- <<: [*BIG, *LEFT, *SMALL]
  x: 1
  label: center/big
"""

yaml = YAML()
data = yaml.load(inp)
print(data)
print('-------------------------------------------------------------------')
yaml.indent(mapping=2, sequence=(4), offset=(2))
yamltostr = yaml.dump(data,sys.stdout)


# import json,sys
# # import ruamel.yaml as myyml
# from ruamel.yaml import YAML,round_trip_load,round_trip_dump
# yaml = YAML()                               ## typ='safe',pure=True 这两个影响dump的结果和排版
# # yaml.default_flow_style = False           ## 这一个影响dump的结果和排版
# # # yaml.default_style = "'"
# # # yaml.preserve_quotes = True
# # # yaml.encoding = None



# my_dic = {
#         'host1': '123',
#         'host2': 456,
#         'host3': {'asd': '123'},
#         'host4': [12, '234', ['wer', 234]],
#         'host5': {'asd': '123', 'eee': [12, '234', ['wer', 234]]}
#         }
 

# # loml = yaml.load(str(my_dic))
# # print(loml)
# yaml.indent(mapping = 2,sequence = 4,offset = 2)
# yaml.dump(my_dic,sys.stdout)


# js = json.loads(json.dumps(my_dic))
# yaml.indent(mapping = 2,sequence = 8,offset = 6)
# yaml.dump(js,sys.stdout)


# # # rtl = round_trip_load(str(my_dic))
# rtd = round_trip_dump(my_dic,default_flow_style=False, indent=2, block_seq_indent=2)   
# print(rtd)


# # # lod = myyml.load(str(my_dic), Loader=ruml.RoundTripLoader,preserve_quotes=None)
# dmp = myyml.dump(my_dic, default_flow_style=False, allow_unicode=True, Dumper=myyml.RoundTripDumper, indent=2, block_seq_indent=2)    
# print(dmp)


'''------------------------------------------------------------------------------------------------------------------------------------'''

# document = """
# ---
# block sequence:
#   - BlockEntryToken
# block mapping:
#   ? KeyToken
#   : ValueToken
# flow sequence: [FlowEntryToken, FlowEntryToken]
# flow mapping: {KeyToken: ValueToken}
# anchors and tags:
#    - &A !!int '5'
#    - *A
# ...
# """
# # scan()
# import yaml
# for token in yaml.scan(document):
#     print(token)



'''------------------------------------------------------------------------------------------------------------------------------------'''


# import sys
# import ruamel.yaml

# yaml_str = """\
# f: 3
# e: 
# - 11     # sequences can have nodes that are mappings
# - 22
# - x: A
#   y: 30
#   z: 
#     m: 51  # this should be last
#     l: 50
#     k: 49  # this should be first 
# d: 1
# """

# def recursive_sort_mappings(s):
#     if isinstance(s, list):
#         for elem in s:
#             recursive_sort_mappings(elem)
#         return 
#     if not isinstance(s, dict):
#         return
#     for key in sorted(s, reverse=True):
#         value = s.pop(key)
#         recursive_sort_mappings(value)
#         s.insert(0, key, value)


# yaml = ruamel.yaml.YAML()
# data = yaml.load(yaml_str)

# recursive_sort_mappings(data)
# yaml.dump(data, sys.stdout)

