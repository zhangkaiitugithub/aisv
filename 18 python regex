

import re

# \w匹配的仅仅是中文，数字，字母，对于国人来讲，仅匹配中文时常会用到，见下:

# 匹配中文字符的正则表达式： [\u4e00-\u9fa5]
# 或许你也需要匹配双字节字符，中文也是双字节的字符

# 匹配双字节字符(包括汉字在内)：[^\x00-\xff]
# 注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）

# 更多常用正则表达式匹配规则：

# 英文字母:[a-zA-Z]

# 数字:[0-9]

# 匹配中文，英文字母和数字及_:

# //code from http://caibaojian.com/zhongwen-regexp.html

# ^[\u4e00-\u9fa5_a-zA-Z0-9]+$

# 同时判断输入长度：·

# [\u4e00-\u9fa5_a-zA-Z0-9_]{4,10}
# ^[\w\u4E00-\u9FA5\uF900-\uFA2D]*$

# 1、一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾：

# ^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$
# 其中：

# ^ 与字符串开始的地方匹配

# (?!_)　　不能以_开头

# (?!.*?_$)　　不能以_结尾

# [a-zA-Z0-9_\u4e00-\u9fa5]+　　至少一个汉字、数字、字母、下划线
# $　　与字符串结束的地方匹配

# 放在程序里前面加@，否则需要\\进行转义 @"^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$"

# （或者：@"^(?!_)\w*(?<!_)$" 或者 @" ^[\u4E00-\u9FA50-9a-zA-Z_]+$ " )
# 2、只含有汉字、数字、字母、下划线，下划线位置不限：

# ^[a-zA-Z0-9_\u4e00-\u9fa5]+$
# 3、由数字、26个英文字母或者下划线组成的字符串

# ^\w+$
# 4、2~4个汉字

# @"^[\u4E00-\u9FA5]{2,4}$";



# # re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。


# print(re.match('www', 'www.runoob.com').span())  # 在起始位置匹配
# print(re.match('com', 'www.runoob.com'))         # 不在起始位置匹配
 
# line = "Cats are smarter than dogs"
# matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)

# if matchObj:
#    print ("matchObj.group() : ", matchObj.group())
#    print ("matchObj.group(1) : ", matchObj.group(1))
#    print ("matchObj.group(2) : ", matchObj.group(2))
# else:
#    print ("No match!!")


# # re.search 扫描整个字符串并返回第一个成功的匹配。


# print(re.search('www', 'www.runoob.com').span())  # 在起始位置匹配
# print(re.search('com', 'www.runoob.com').span())         # 不在起始位置匹配

# line = "Cats are smarter than dogs"
# searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)

# if searchObj:
#    print ("searchObj.group() : ", searchObj.group())
#    print ("searchObj.group(1) : ", searchObj.group(1))
#    print ("searchObj.group(2) : ", searchObj.group(2))
# else:
#    print ("Nothing found!!")


# # re.sub 用于替换字符串中的匹配项。


# phone = "2004-959-559 # 这是一个电话号码"

# # 删除注释
# num = re.sub(r'#.*$', "", phone)
# print ("电话号码 : ", num)
 
# # 移除非数字的内容
# num = re.sub(r'\D', "", phone)
# print ("电话号码 : ", num)

# s = 'Make the World a *Better Place*'
# pattern = r'\*(.*?)\*'
# replacement = r'<b>\1<\\b>'
# html = re.sub(pattern, replacement, s)

# print(html)


# # 使用函数，其中函数的参数调用的都是re.Match object，


# def square(match):
#     num = int(match.group())
#     return str(num*num)

# l = ['A1','A2','A3']
# pattern = r'\d+'
# new_l = [re.sub(pattern, square, s) for s in l]

# print(new_l)

# s = 'A23G4HFD567'

# def double(matched):
#     value = int(matched.group('value'))
#     return str(value * 2)

# print(re.sub('(?P<value>\d+)', double, s))

############################################# 解释：############################################
# 首先要查找到，才替换
# 所以第一步就是查找：

# sub查找到了，则对应返回的值是一个 match对象（包括search方法查找到了都是返回一个match对象，这是python规定的）
# 接着，double这个函数的参数接受到了这个对象
# 然后，可以通过调用组名来获取匹配到的内容【group组是可以命名的】
 
# =============================================================================================
# 前方高能请耐心看完
 
# (?P<name>...)  named group 带命名的组
# (?P<value>\d+)通过这样的一组方式可以将匹配到的组（也就是匹配到的内容【groups（）】）命名为value【这里的例子是命名为value】
# 后面的‘\d+’则是正则表达式要匹配的内容，而前面的‘?P<name>’则是对这个组名的声明
 
# 1. (?P=name)
# ##就是通过 (?P=name)的方式来引用【这个方法用在正则表达式里】
# url = '<a>www.baidu.com<a>baidu'
# uu = re.search(r'<a>www.(?P<value>.+?).com<a>(?P=value)',url)
# print(uu)
 
# 2. mateched.group(name)
# ##可以通过之前给group命的名，来获得匹配到的值
# url = '<a>www.baidu.com<a>baidu'
# b = re.search(r'<a>www.(?P<value>.+?).com<a>(?P=value)',url)
# print(b.group('value'))

# 3. matched.group(N) == matched.group(name)
#     # 此处，通过group的index，即group(1),group(2),...
#     # 也可以获得和之前通过名字name获得的group的值
#     # 通过名字或者索引号，两种方式都可以获得所需要的值，
#     # 但是通过名字，更加准确，不会出现，当group太多而index容易混淆的问题
 
# 4. \g<name> in re.sub()
# 在re.sub()中，通过\g<name>的方式，引用前面已经命名为name的group的值
# url = '<a>www.baidu.com<a>baidu'
# c = re.sub(r'<a>www.(?P<value>.+?).com<a>(?P=value)','\g<value>',url)
# print(c)

# astr1 = 'AAbb aabb'
# astr2 = 'aabb aabb'
# astr3 = 'aabb ccbb'
 
# for s in astr1,astr2,astr3:
#     result = re.match(r'(?i)(?P<pattern>[\w]+) (?P=pattern)',s)
#     if result != None:
#         print('{} match result is {}'.format(s,result.group()))
#     else:
#         print('{} match Nothing'.format(s))
# astr = 'aabb aacc aadd'

# result = re.sub(r'(?i)aa(?P<pattern>[\w]+)',r'bb\g<pattern>',astr)
# print('{} has been substituted to {}'.format(astr,result)

# '''
# (?i) (?s) (?m) (?is) (?im) 是什么意思？
# 	称为内联匹配模式，通常用内联匹配模式代替使用枚举值RegexOptions指定的全局匹配模式，写起来更简洁。
# 	(?i) 表示所在位置右侧的表达式开启忽略大小写模式
# 	(?s) 表示所在位置右侧的表达式开启单行模式。
# 	更改句点字符 (.) 的含义，以使它与每个字符（而不是除 \n 之外的所有字符）匹配。
# 	注意：(?s)通常在匹配有换行的文本时使用
# 	(?m) 表示所在位置右侧的表示式开启指定多行模式。
# 	更改 ^ 和 $ 的含义，以使它们分别与任何行的开头和结尾匹配，
# 	而不只是与整个字符串的开头和结尾匹配。
# 	注意：(?m)只有在正则表达式中涉及到多行的“^”和“$”的匹配时，才使用Multiline模式。
# 	上面的匹配模式可以组合使用，比如(?is),(?im)。
# 	另外，还可以用(?i:exp)或者(?i)exp(?-i)来指定匹配的有效范围。

# 	(?)单个问号是不捕捉模式 写法如：(?:) 只是用它来做分组，方法是在左括号的后边加上:?，
#     "(?:\\w+\\s(\\w+))"
# '''

# re.compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象


# pattern = re.compile(r'\d+')

# m = pattern.match('one12twothree34four')        # 查找头部，没有匹配
# print( m )

# m = pattern.match('one12twothree34four', 2, 10) # 从'e'的位置开始匹配，没有匹配
# print( m )

# m = pattern.match('one12twothree34four', 3, 10) # 从'1'的位置开始匹配，正好匹配
# print( m ) 

# print(m.group(0))
# print(m.start(0))
# print(m.end(0))
# print(m.span(0))


# # re.findall 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。
# # 注意： match 和 search 是匹配一次 findall 匹配所有

# result1 = re.findall(r'\d+','runoob 123 google 456')
 
# pattern = re.compile(r'\d+')   # 查找数字

# result2 = pattern.findall('runoob 123 google 456')
# result3 = pattern.findall('run88oob123google456', 0, 10)
 
# print(result1)
# print(result2)
# print(result3)

# result = re.findall(r'(\w+)=(\d+)', 'set width=20 and height=10')

# print(result)


# # re.finditer在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回


# it = re.finditer(r"\d+","12a32bc43jf3") 
# for match in it: 
#     print (match.group() )


# [\b] 匹配转义字符\b本身，匹配退格键 \u0008 
print(re.sub(re.compile(r"[\b]", re.S), "|", "That \bdang' var\bmint's cost me $199.95!"))

# \b：表示字母数字与非字母数字的边界，     非字母数字与字母数字的边界。
# \B：表示字母数字与字母数字的边界，非字母数字与非字母数字的边界。

# 分组0对应整个正则表达式
# 实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号
# 你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权

# print(re.split('123\\b','==123!! abc123. 123. 123abc. 123'))
# print(re.split('123\\b','==123!! abc123. 123\tabc 123'))
# print(re.split('\\b123\\b','123 ==123!! abc123.123.123abc.123'))
# print(re.split('\\b123=\\b','==123!! abc123,123,123=abc,123'))
# print(re.split('\\b123a\\b','==123!! abc123,123,123a\nbc,123'))
# print(re.split('\\b123=\\b','==123!! abc123,123,123==abc,123'))
# print(re.split(r'pyc\B','1pycthon py5 2pyc342 pyc1py2py4 pyp3 3pyc# pyc'))
# print(re.split(r'py=\B','1py=cthon py5 2py=342 py==1py2py4 pyp3 3py= pyabc'))
# print(re.split('\\b123=\\B','==123!! abc123,123,123==abc,123'))
# print(re.search(r"\b(\w+)\b\s+\1\b","hello go go hello"))


# print(re.findall(r"\b\w+(?=ing\b)","I'm singing while you're dancinger"))
# print(re.findall(r"(?<=\bre)\w+\b","reading a acree`s book"))
# print(re.findall(r"(?<=<(\w{4})>)(.*)(?=<\/\1>)","<span> hello world </span>"))


# 前向肯定断言的语法：(?<=pattern) 前向肯定断言表示你希望匹配的字符串前面是pattern匹配的内容时，才匹配。
# 后向肯定断言的语法：(?=pattern) 后向肯定断言表示你希望匹配的字符串的后面是pattern匹配的内容时，才匹配
# 如果在一次匹配过程中，需要同时用到前向肯定断言和后向肯定断言时，那你必须将前向肯定断言表达式写在要匹配的正则表达式的前面，而后向肯定断言表 达式写在你要匹配的字符串的后面
# 前后断言本身相当于是两个字符之间的位置而不是字符，与\b的边界相似

# print(re.findall(r'(?=abc)',"fishc@abcch"))
# print(re.findall(r'(?=abc)abc',"fishc@abcch"))
# print(re.findall(r'@(?=abc)abcch',"fishc@abcch"))
# print(re.findall(r'(?=abc)@abc',"fishc@abcch"))
# print(re.findall(r'fishc@abc(?=abc)ch',"fishc@abcch"))
# print(re.findall(r'(?=.abc)@abc',"fishc@abcch"))
# print(re.findall(r'fishc@(?=abc)',"fishc@abcch"))
# print(re.findall(r'fish(?=abc)',"fishc@abcch"))

# 注意点：在 Python 中两个反向界定的表达式(反向界定'?<=exp'和反向否定界定'?<!exp')中，exp 只允许使用定长文本，因此不能加*号，例如: (?<!href\s*=\s*)  # 非法的，因为exp只能用定长文本

# 利用断言查找不含某字符的匹配

print(re.findall(r'^(?:(?<!abc/).)*(.*?):','abc/def?ghi:jkl<mno>pqr|st'))
print(re.findall(r'^(?:(?<!/).)*?:','abc/def?ghi:jkl<mno>pqr|st'))

print(re.findall(r'^(?!.*mno)','abc/def?ghi:jkl<mno>pqr|st'))

print(re.findall(r'[^/]*?:','abc/def?ghi:jkl<mno>pqr|st'))
print(re.findall(r'^[^/]*?:','abc/def?ghi:jkl<mno>pqr|st'))




